[
	{
		"date":"16th July 2017",
		"storyName":"About this site",
		"storyText":"I store all config in Git (gitLab), content is autopublished on change from GitLab showing the 'pipelines as code' pattern talked about by https://www.thoughtworks.com/radar/techniques/pipelines-as-code Thoughtworks. I do cheat a little though in that in the 5 minutes I spent setting this up, I simply used a cronjob on the server to git pull every minute. If there are no changes (based on the SHA1 hash of the last commit, which expresses the state of the Repo), git simply does nothing. I quite like Meteor as a web development environment from two perspectives: Blaze (the SPA included by default) uses WebSockets which is superior from a Push versus manual or polling refresh, it has built in OAuth from Google etc. I use MongoDb as a backend, and also I find the speed of NodeJS a bit surprising, but the ethos is single thread to avoid especially the time wasted in locking problems. The CSS styles I'm using here are bootstrap, but I like the cards from w3schools. You can play around on the main page by dragging and dropping the cards into each other. I'm also building a micro-frontend (this very site) using WebSockets push and my own simple templating mechanism. Obviously will add routing. I've professionally used Angular and React, and while they are great, I'm exploring how easy it is to do most of this in javascript/css without the need for heavy frameworks. Also assuming REST is replaced with WebSockets in future (push is better), this could be the start of a new push-microframework."
	}
]